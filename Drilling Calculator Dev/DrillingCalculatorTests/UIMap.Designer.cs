// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DrillingCalculatorTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// PumpFactorRecording - Use 'PumpFactorRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinEdit uITextBox21Edit = this.UIDrillingCalculatorWindow.UIItem0Window1.UITextBox21Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(37, 4));

            // Type '2' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorRecordingParams.UITextBox20EditText;

            // Type '2' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorRecordingParams.UITextBox22EditText;

            // Type '2' in 'textBox21' text box
            uITextBox21Edit.Text = this.PumpFactorRecordingParams.UITextBox21EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(72, 27));
        }
        
        /// <summary>
        /// PumpFactorAssertion - Use 'PumpFactorAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '12'
            Assert.AreEqual(this.PumpFactorAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox26' text box equals '12'
            Assert.AreEqual(this.PumpFactorAssertionExpectedValues.UITextBox26EditText1, uITextBox26Edit.Text, "GOOFED");
        }
        
        /// <summary>
        /// Testing for all zero input
        /// </summary>
        public void PumpFactorZeroRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox21Edit = this.UIDrillingCalculatorWindow.UIItem0Window1.UITextBox21Edit;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorZeroRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorZeroRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(26, 9));

            // Type '0' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorZeroRecordingParams.UITextBox20EditText;

            // Type '0' in 'textBox21' text box
            uITextBox21Edit.Text = this.PumpFactorZeroRecordingParams.UITextBox21EditText;

            // Type '0' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorZeroRecordingParams.UITextBox22EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(44, 26));
        }
        
        /// <summary>
        /// PumpFactorZeroAssertion - Use 'PumpFactorZeroAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorZeroAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '0'
            Assert.AreEqual(this.PumpFactorZeroAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text, "Should be Zero");

            // Verify that the 'Text' property of 'textBox27' text box equals '0'
            Assert.AreEqual(this.PumpFactorZeroAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text, "should be zero");

            // Verify that the 'Text' property of 'textBox28' text box equals '0'
            Assert.AreEqual(this.PumpFactorZeroAssertionExpectedValues.UITextBox28EditText, uITextBox28Edit.Text, "should be zero");
        }
        
        /// <summary>
        /// PumpFactorNegRecording - Use 'PumpFactorNegRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorNegRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinEdit uITextBox23Edit = this.UIDrillingCalculatorWindow.UIItem1Window.UITextBox23Edit;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox21Edit = this.UIDrillingCalculatorWindow.UIItem0Window1.UITextBox21Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorNegRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorNegRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(34, 12));

            // Type '-1' in 'textBox23' text box
            uITextBox23Edit.Text = this.PumpFactorNegRecordingParams.UITextBox23EditText;

            // Type '-1' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorNegRecordingParams.UITextBox22EditText;

            // Type '-2' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorNegRecordingParams.UITextBox20EditText;

            // Type '-3' in 'textBox21' text box
            uITextBox21Edit.Text = this.PumpFactorNegRecordingParams.UITextBox21EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(76, 32));
        }
        
        /// <summary>
        /// PumpFactorNegAssertion - Use 'PumpFactorNegAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorNegAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '-1.570796'
            Assert.AreEqual(this.PumpFactorNegAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox27' text box equals '-0.0067999'
            Assert.AreEqual(this.PumpFactorNegAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text);

            // Verify that the 'Text' property of 'textBox28' text box equals '-0.0001619043'
            Assert.AreEqual(this.PumpFactorNegAssertionExpectedValues.UITextBox28EditText, uITextBox28Edit.Text);
        }
        
        /// <summary>
        /// PumpFactorPosRecording - Use 'PumpFactorPosRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorPosRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox21Edit = this.UIDrillingCalculatorWindow.UIItem0Window1.UITextBox21Edit;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorPosRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorPosRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(35, 8));

            // Type '3' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorPosRecordingParams.UITextBox20EditText;

            // Type '2' in 'textBox21' text box
            uITextBox21Edit.Text = this.PumpFactorPosRecordingParams.UITextBox21EditText;

            // Type '1' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorPosRecordingParams.UITextBox22EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(68, 13));
        }
        
        /// <summary>
        /// PumpFactorPosAssertion - Use 'PumpFactorPosAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorPosAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '22'
            Assert.AreEqual(this.PumpFactorPosAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox27' text box equals '0.0951997773815088'
            Assert.AreEqual(this.PumpFactorPosAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text);

            // Verify that the 'Text' property of 'textBox26' text box equals '21.991148575128552'
            Assert.AreEqual(this.PumpFactorPosAssertionExpectedValues.UITextBox26EditText1, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox28' text box equals '0.0022666613662264'
            Assert.AreEqual(this.PumpFactorPosAssertionExpectedValues.UITextBox28EditText, uITextBox28Edit.Text);
        }
        
        /// <summary>
        /// PumpFactorNegTriplexRecording - Use 'PumpFactorNegTriplexRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorNegTriplexRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinRadioButton uITriplexRadioButton = this.UIDrillingCalculatorWindow.UITriplexWindow.UITriplexRadioButton;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinWindow uIItem0Window = this.UIDrillingCalculatorWindow.UILinerLengthGroup.UIItem0Window;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinEdit uITextBox23Edit = this.UIDrillingCalculatorWindow.UIItem1Window.UITextBox23Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorNegTriplexRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorNegTriplexRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(31, 9));

            // Select 'Triplex' radio button
            uITriplexRadioButton.Selected = this.PumpFactorNegTriplexRecordingParams.UITriplexRadioButtonSelected;

            // Type '-2' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorNegTriplexRecordingParams.UITextBox20EditText;

            // Click '0' window
            Mouse.Click(uIItem0Window, new Point(15, 0));

            // Type '-1' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorNegTriplexRecordingParams.UITextBox22EditText;

            // Type '-1' in 'textBox23' text box
            uITextBox23Edit.Text = this.PumpFactorNegTriplexRecordingParams.UITextBox23EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(54, 28));
        }
        
        /// <summary>
        /// PumpFactorNegTriplexAssertion - Use 'PumpFactorNegTriplexAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorNegTriplexAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '9.42857142857143'
            Assert.AreEqual(this.PumpFactorNegTriplexAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox27' text box equals '0.0408163265306122'
            Assert.AreEqual(this.PumpFactorNegTriplexAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text);

            // Verify that the 'Text' property of 'textBox28' text box equals '0.000971817298347911'
            Assert.AreEqual(this.PumpFactorNegTriplexAssertionExpectedValues.UITextBox28EditText, uITextBox28Edit.Text);
        }
        
        /// <summary>
        /// PumpFactorZeroTriplexRecording - Use 'PumpFactorZeroTriplexRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorZeroTriplexRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinRadioButton uITriplexRadioButton = this.UIDrillingCalculatorWindow.UITriplexWindow.UITriplexRadioButton;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorZeroTriplexRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorZeroTriplexRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(30, 8));

            // Select 'Triplex' radio button
            uITriplexRadioButton.Selected = this.PumpFactorZeroTriplexRecordingParams.UITriplexRadioButtonSelected;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(52, 31));
        }
        
        /// <summary>
        /// PumpFactorZeroTriplexAssertion - Use 'PumpFactorZeroTriplexAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorZeroTriplexAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '0'
            Assert.AreEqual(this.PumpFactorZeroTriplexAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox27' text box equals '0'
            Assert.AreEqual(this.PumpFactorZeroTriplexAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text);

            // Verify that the 'Text' property of 'textBox28' text box equals '0'
            Assert.AreEqual(this.PumpFactorZeroTriplexAssertionExpectedValues.UITextBox28EditText, uITextBox28Edit.Text);
        }
        
        /// <summary>
        /// PumpFactorPosTriplexRecording - Use 'PumpFactorPosTriplexRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorPosTriplexRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinRadioButton uITriplexRadioButton = this.UIDrillingCalculatorWindow.UITriplexWindow.UITriplexRadioButton;
            WinWindow uIItem0Window = this.UIDrillingCalculatorWindow.UILinerDiameterGroup.UIItem0Window;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorPosTriplexRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorPosTriplexRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(22, 9));

            // Select 'Triplex' radio button
            uITriplexRadioButton.Selected = this.PumpFactorPosTriplexRecordingParams.UITriplexRadioButtonSelected;

            // Click '0' window
            Mouse.Click(uIItem0Window, new Point(48, 1));

            // Type '2' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorPosTriplexRecordingParams.UITextBox20EditText;

            // Type '1' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorPosTriplexRecordingParams.UITextBox22EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(53, 46));
        }
        
        /// <summary>
        /// PumpFactorPosTriplexAssertion - Use 'PumpFactorPosTriplexAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorPosTriplexAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '9.42857142857143'
            Assert.AreEqual(this.PumpFactorPosTriplexAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox27' text box equals '0.0408163265306122'
            Assert.AreEqual(this.PumpFactorPosTriplexAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text);

            // Verify that the 'ControlType' property of 'textBox28' text box equals 'Edit'
            Assert.AreEqual(this.PumpFactorPosTriplexAssertionExpectedValues.UITextBox28EditControlType, uITextBox28Edit.ControlType.ToString());
        }
        
        /// <summary>
        /// PumpFactorConvertRecording - Use 'PumpFactorConvertRecordingParams' to pass parameters into this method.
        /// </summary>
        public void PumpFactorConvertRecording()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinRadioButton uITriplexRadioButton = this.UIDrillingCalculatorWindow.UITriplexWindow.UITriplexRadioButton;
            WinRadioButton uICMRadioButton = this.UIDrillingCalculatorWindow.UICMWindow.UICMRadioButton;
            WinRadioButton uICMRadioButton1 = this.UIDrillingCalculatorWindow.UICMWindow1.UICMRadioButton;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.PumpFactorConvertRecordingParams.UIDrillingCalculatorWindowExePath, this.PumpFactorConvertRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(44, 10));

            // Select 'Triplex' radio button
            uITriplexRadioButton.Selected = this.PumpFactorConvertRecordingParams.UITriplexRadioButtonSelected;

            // Select 'cm' radio button
            uICMRadioButton.Selected = this.PumpFactorConvertRecordingParams.UICMRadioButtonSelected;

            // Select 'cm' radio button
            uICMRadioButton1.Selected = this.PumpFactorConvertRecordingParams.UICMRadioButtonSelected1;

            // Type '2' in 'textBox20' text box
            uITextBox20Edit.Text = this.PumpFactorConvertRecordingParams.UITextBox20EditText;

            // Type '1' in 'textBox22' text box
            uITextBox22Edit.Text = this.PumpFactorConvertRecordingParams.UITextBox22EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(74, 34));
        }
        
        /// <summary>
        /// PumpFactorConvertAssertion - Use 'PumpFactorConvertAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PumpFactorConvertAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox26Edit = this.UIDrillingCalculatorWindow.UITextBox26Window.UITextBox26Edit;
            WinEdit uITextBox27Edit = this.UIDrillingCalculatorWindow.UITextBox27Window.UITextBox27Edit;
            WinEdit uITextBox28Edit = this.UIDrillingCalculatorWindow.UITextBox28Window.UITextBox28Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox26' text box equals '0.575363277842571'
            Assert.AreEqual(this.PumpFactorConvertAssertionExpectedValues.UITextBox26EditText, uITextBox26Edit.Text);

            // Verify that the 'Text' property of 'textBox27' text box equals '0.00249075012053061'
            Assert.AreEqual(this.PumpFactorConvertAssertionExpectedValues.UITextBox27EditText, uITextBox27Edit.Text);

            // Verify that the 'Text' property of 'textBox28' text box equals '5.93035742983479E-05'
            Assert.AreEqual(this.PumpFactorConvertAssertionExpectedValues.UITextBox28EditText, uITextBox28Edit.Text);
        }
        
        /// <summary>
        /// TonMilesZeroRecording - Use 'TonMilesZeroRecordingParams' to pass parameters into this method.
        /// </summary>
        public void TonMilesZeroRecording()
        {
            #region Variable Declarations
            WinTabPage uITonMilesTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UITonMilesTabPage;
            WinButton uITonMilesonRoundTripOButton = this.UIDrillingCalculatorWindow.UITonMilesonRoundTripOWindow.UITonMilesonRoundTripOButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.TonMilesZeroRecordingParams.UIDrillingCalculatorWindowExePath, this.TonMilesZeroRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Ton Miles' tab
            Mouse.Click(uITonMilesTabPage, new Point(20, 10));

            // Click 'Ton Miles on Round Trip Operation (T1)' button
            Mouse.Click(uITonMilesonRoundTripOButton, new Point(143, 31));
        }
        
        /// <summary>
        /// TonMilesZeroAssertion - Use 'TonMilesZeroAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TonMilesZeroAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox111Edit = this.UIDrillingCalculatorWindow.UITextBox111Window.UITextBox111Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox111' text box equals '0'
            Assert.AreEqual(this.TonMilesZeroAssertionExpectedValues.UITextBox111EditText, uITextBox111Edit.Text);
        }
        
        /// <summary>
        /// TonMilesNegRecording - Use 'TonMilesNegRecordingParams' to pass parameters into this method.
        /// </summary>
        public void TonMilesNegRecording()
        {
            #region Variable Declarations
            WinTabPage uITonMilesTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UITonMilesTabPage;
            WinEdit uITextBox99Edit = this.UIDrillingCalculatorWindow.UIItem0Window3.UITextBox99Edit;
            WinEdit uITextBox100Edit = this.UIDrillingCalculatorWindow.UIItem0Window11.UITextBox100Edit;
            WinEdit uITextBox101Edit = this.UIDrillingCalculatorWindow.UIItem0Window21.UITextBox101Edit;
            WinEdit uITextBox102Edit = this.UIDrillingCalculatorWindow.UIItem0Window31.UITextBox102Edit;
            WinEdit uITextBox103Edit = this.UIDrillingCalculatorWindow.UIItem0Window4.UITextBox103Edit;
            WinEdit uITextBox104Edit = this.UIDrillingCalculatorWindow.UIItem0Window5.UITextBox104Edit;
            WinEdit uITextBox105Edit = this.UIDrillingCalculatorWindow.UIItem0Window6.UITextBox105Edit;
            WinButton uITonMilesonRoundTripOButton = this.UIDrillingCalculatorWindow.UITonMilesonRoundTripOWindow.UITonMilesonRoundTripOButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.TonMilesNegRecordingParams.UIDrillingCalculatorWindowExePath, this.TonMilesNegRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Ton Miles' tab
            Mouse.Click(uITonMilesTabPage, new Point(37, 7));

            // Type '-1' in 'textBox99' text box
            uITextBox99Edit.Text = this.TonMilesNegRecordingParams.UITextBox99EditText;

            // Type '-2' in 'textBox100' text box
            uITextBox100Edit.Text = this.TonMilesNegRecordingParams.UITextBox100EditText;

            // Type '-3' in 'textBox101' text box
            uITextBox101Edit.Text = this.TonMilesNegRecordingParams.UITextBox101EditText;

            // Type '-4' in 'textBox102' text box
            uITextBox102Edit.Text = this.TonMilesNegRecordingParams.UITextBox102EditText;

            // Type '-5' in 'textBox103' text box
            uITextBox103Edit.Text = this.TonMilesNegRecordingParams.UITextBox103EditText;

            // Type '-6' in 'textBox104' text box
            uITextBox104Edit.Text = this.TonMilesNegRecordingParams.UITextBox104EditText;

            // Type '-7' in 'textBox105' text box
            uITextBox105Edit.Text = this.TonMilesNegRecordingParams.UITextBox105EditText;

            // Click 'Ton Miles on Round Trip Operation (T1)' button
            Mouse.Click(uITonMilesonRoundTripOButton, new Point(115, 35));
        }
        
        /// <summary>
        /// TonMilesPosRecording - Use 'TonMilesPosRecordingParams' to pass parameters into this method.
        /// </summary>
        public void TonMilesPosRecording()
        {
            #region Variable Declarations
            WinTabPage uITonMilesTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UITonMilesTabPage;
            WinEdit uITextBox99Edit = this.UIDrillingCalculatorWindow.UIItem0Window3.UITextBox99Edit;
            WinEdit uITextBox100Edit = this.UIDrillingCalculatorWindow.UIItem0Window11.UITextBox100Edit;
            WinEdit uITextBox101Edit = this.UIDrillingCalculatorWindow.UIItem0Window21.UITextBox101Edit;
            WinEdit uITextBox102Edit = this.UIDrillingCalculatorWindow.UIItem0Window31.UITextBox102Edit;
            WinEdit uITextBox103Edit = this.UIDrillingCalculatorWindow.UIItem0Window4.UITextBox103Edit;
            WinWindow uIItem0Window = this.UIDrillingCalculatorWindow.UIWeightfootofDrillPipGroup.UIItem0Window;
            WinEdit uITextBox104Edit = this.UIDrillingCalculatorWindow.UIItem0Window5.UITextBox104Edit;
            WinEdit uITextBox105Edit = this.UIDrillingCalculatorWindow.UIItem0Window6.UITextBox105Edit;
            WinButton uITonMilesonRoundTripOButton = this.UIDrillingCalculatorWindow.UITonMilesonRoundTripOWindow.UITonMilesonRoundTripOButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.TonMilesPosRecordingParams.UIDrillingCalculatorWindowExePath, this.TonMilesPosRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Ton Miles' tab
            Mouse.Click(uITonMilesTabPage, new Point(37, 11));

            // Type '1' in 'textBox99' text box
            uITextBox99Edit.Text = this.TonMilesPosRecordingParams.UITextBox99EditText;

            // Type '2' in 'textBox100' text box
            uITextBox100Edit.Text = this.TonMilesPosRecordingParams.UITextBox100EditText;

            // Type '3' in 'textBox101' text box
            uITextBox101Edit.Text = this.TonMilesPosRecordingParams.UITextBox101EditText;

            // Type '4' in 'textBox102' text box
            uITextBox102Edit.Text = this.TonMilesPosRecordingParams.UITextBox102EditText;

            // Type '5' in 'textBox103' text box
            uITextBox103Edit.Text = this.TonMilesPosRecordingParams.UITextBox103EditText;

            // Click '0' window
            Mouse.Click(uIItem0Window, new Point(68, 1));

            // Type '6' in 'textBox104' text box
            uITextBox104Edit.Text = this.TonMilesPosRecordingParams.UITextBox104EditText;

            // Type '7' in 'textBox105' text box
            uITextBox105Edit.Text = this.TonMilesPosRecordingParams.UITextBox105EditText;

            // Click 'Ton Miles on Round Trip Operation (T1)' button
            Mouse.Click(uITonMilesonRoundTripOButton, new Point(94, 26));
        }
        
        /// <summary>
        /// BHAZero - Use 'BHAZeroParams' to pass parameters into this method.
        /// </summary>
        public void BHAZero()
        {
            #region Variable Declarations
            WinTabPage uIBHATabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIBHATabPage;
            WinButton uIBHAlengthButton = this.UIDrillingCalculatorWindow.UIBHAlengthWindow.UIBHAlengthButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.BHAZeroParams.UIDrillingCalculatorWindowExePath, this.BHAZeroParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'BHA' tab
            Mouse.Click(uIBHATabPage, new Point(11, 6));

            // Click 'BHA length' button
            Mouse.Click(uIBHAlengthButton, new Point(88, 48));
        }
        
        /// <summary>
        /// BHAZeroAssertion - Use 'BHAZeroAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BHAZeroAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox51Edit = this.UIDrillingCalculatorWindow.UITextBox51Window.UITextBox51Edit;
            WinEdit uITextBox50Edit = this.UIDrillingCalculatorWindow.UITextBox50Window.UITextBox50Edit;
            WinEdit uITextBox49Edit = this.UIDrillingCalculatorWindow.UITextBox49Window.UITextBox49Edit;
            WinEdit uITextBox52Edit = this.UIDrillingCalculatorWindow.UITextBox52Window.UITextBox52Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox51' text box equals '1'
            Assert.AreEqual(this.BHAZeroAssertionExpectedValues.UITextBox51EditText, uITextBox51Edit.Text);

            // Verify that the 'Text' property of 'textBox50' text box equals 'NaN'
            Assert.AreEqual(this.BHAZeroAssertionExpectedValues.UITextBox50EditText, uITextBox50Edit.Text);

            // Verify that the 'Text' property of 'textBox49' text box equals 'NaN'
            Assert.AreEqual(this.BHAZeroAssertionExpectedValues.UITextBox49EditText, uITextBox49Edit.Text);

            // Verify that the 'Text' property of 'textBox52' text box equals 'NaN'
            Assert.AreEqual(this.BHAZeroAssertionExpectedValues.UITextBox52EditText, uITextBox52Edit.Text);
        }
        
        /// <summary>
        /// BHANegRecording - Use 'BHANegRecordingParams' to pass parameters into this method.
        /// </summary>
        public void BHANegRecording()
        {
            #region Variable Declarations
            WinTabPage uIBHATabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIBHATabPage;
            WinEdit uITextBox44Edit = this.UIDrillingCalculatorWindow.UIItem0Window7.UITextBox44Edit;
            WinEdit uITextBox46Edit = this.UIDrillingCalculatorWindow.UIItem0Window12.UITextBox46Edit;
            WinEdit uITextBox47Edit = this.UIDrillingCalculatorWindow.UIItem0Window22.UITextBox47Edit;
            WinButton uIBHAlengthButton = this.UIDrillingCalculatorWindow.UIBHAlengthWindow.UIBHAlengthButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.BHANegRecordingParams.UIDrillingCalculatorWindowExePath, this.BHANegRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'BHA' tab
            Mouse.Click(uIBHATabPage, new Point(27, 7));

            // Type '-1' in 'textBox44' text box
            uITextBox44Edit.Text = this.BHANegRecordingParams.UITextBox44EditText;

            // Type '-2' in 'textBox46' text box
            uITextBox46Edit.Text = this.BHANegRecordingParams.UITextBox46EditText;

            // Type '-3' in 'textBox47' text box
            uITextBox47Edit.Text = this.BHANegRecordingParams.UITextBox47EditText;

            // Click 'BHA length' button
            Mouse.Click(uIBHAlengthButton, new Point(144, 50));
        }
        
        /// <summary>
        /// BHANegAssertion - Use 'BHANegAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BHANegAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox51Edit = this.UIDrillingCalculatorWindow.UITextBox51Window.UITextBox51Edit;
            WinEdit uITextBox50Edit = this.UIDrillingCalculatorWindow.UITextBox50Window.UITextBox50Edit;
            WinEdit uITextBox49Edit = this.UIDrillingCalculatorWindow.UITextBox49Window.UITextBox49Edit;
            WinEdit uITextBox52Edit = this.UIDrillingCalculatorWindow.UITextBox52Window.UITextBox52Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox51' text box equals '1.04580152671756'
            Assert.AreEqual(this.BHANegAssertionExpectedValues.UITextBox51EditText, uITextBox51Edit.Text);

            // Verify that the 'Text' property of 'textBox50' text box equals '0.562473164448261'
            Assert.AreEqual(this.BHANegAssertionExpectedValues.UITextBox50EditText, uITextBox50Edit.Text);

            // Verify that the 'Text' property of 'textBox49' text box equals '0.17144182052383'
            Assert.AreEqual(this.BHANegAssertionExpectedValues.UITextBox49EditText, uITextBox49Edit.Text);

            // Verify that the 'Text' property of 'textBox52' text box equals '0.0181442956273633'
            Assert.AreEqual(this.BHANegAssertionExpectedValues.UITextBox52EditText, uITextBox52Edit.Text);
        }
        
        /// <summary>
        /// BHAPosRecording - Use 'BHAPosRecordingParams' to pass parameters into this method.
        /// </summary>
        public void BHAPosRecording()
        {
            #region Variable Declarations
            WinTabPage uIBHATabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIBHATabPage;
            WinEdit uITextBox44Edit = this.UIDrillingCalculatorWindow.UIItem0Window7.UITextBox44Edit;
            WinWindow uIItem0Window = this.UIDrillingCalculatorWindow.UIWeightfootofDrillColGroup.UIItem0Window;
            WinEdit uITextBox46Edit = this.UIDrillingCalculatorWindow.UIItem0Window12.UITextBox46Edit;
            WinEdit uITextBox47Edit = this.UIDrillingCalculatorWindow.UIItem0Window22.UITextBox47Edit;
            WinButton uIBHAlengthButton = this.UIDrillingCalculatorWindow.UIBHAlengthWindow.UIBHAlengthButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.BHAPosRecordingParams.UIDrillingCalculatorWindowExePath, this.BHAPosRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'BHA' tab
            Mouse.Click(uIBHATabPage, new Point(22, 9));

            // Type '1' in 'textBox44' text box
            uITextBox44Edit.Text = this.BHAPosRecordingParams.UITextBox44EditText;

            // Click '0' window
            Mouse.Click(uIItem0Window, new Point(61, 0));

            // Type '2' in 'textBox46' text box
            uITextBox46Edit.Text = this.BHAPosRecordingParams.UITextBox46EditText;

            // Type '3' in 'textBox47' text box
            uITextBox47Edit.Text = this.BHAPosRecordingParams.UITextBox47EditText;

            // Click 'BHA length' button
            Mouse.Click(uIBHAlengthButton, new Point(43, 63));
        }
        
        /// <summary>
        /// BHAPosAssertion - Use 'BHAPosAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BHAPosAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox51Edit = this.UIDrillingCalculatorWindow.UITextBox51Window.UITextBox51Edit;
            WinEdit uITextBox50Edit = this.UIDrillingCalculatorWindow.UITextBox50Window.UITextBox50Edit;
            WinEdit uITextBox49Edit = this.UIDrillingCalculatorWindow.UITextBox49Window.UITextBox49Edit;
            WinEdit uITextBox52Edit = this.UIDrillingCalculatorWindow.UITextBox52Window.UITextBox52Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox51' text box equals '0.954198473282443'
            Assert.AreEqual(this.BHAPosAssertionExpectedValues.UITextBox51EditText, uITextBox51Edit.Text);

            // Verify that the 'Text' property of 'textBox50' text box equals '0.616470588235294'
            Assert.AreEqual(this.BHAPosAssertionExpectedValues.UITextBox50EditText, uITextBox50Edit.Text);

            // Verify that the 'Text' property of 'textBox49' text box equals '0.187900235294118'
            Assert.AreEqual(this.BHAPosAssertionExpectedValues.UITextBox49EditText, uITextBox49Edit.Text);

            // Verify that the 'Text' property of 'textBox52' text box equals '0.0198861480075901'
            Assert.AreEqual(this.BHAPosAssertionExpectedValues.UITextBox52EditText, uITextBox52Edit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinTabPage uIMudPumpsTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIMudPumpsTabPage;
            WinEdit uITextBox20Edit = this.UIDrillingCalculatorWindow.UIItem0Window.UITextBox20Edit;
            WinEdit uITextBox21Edit = this.UIDrillingCalculatorWindow.UIItem0Window1.UITextBox21Edit;
            WinWindow uIItem0Window = this.UIDrillingCalculatorWindow.UILinerLengthGroup.UIItem0Window;
            WinEdit uITextBox22Edit = this.UIDrillingCalculatorWindow.UIItem0Window2.UITextBox22Edit;
            WinEdit uITextBox23Edit = this.UIDrillingCalculatorWindow.UIItem1Window.UITextBox23Edit;
            WinButton uIPumpFactorButton = this.UIDrillingCalculatorWindow.UIPumpFactorWindow.UIPumpFactorButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIDrillingCalculatorWindowExePath, this.RecordedMethod1Params.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Mud Pumps' tab
            Mouse.Click(uIMudPumpsTabPage, new Point(22, 5));

            // Type '1' in 'textBox20' text box
            uITextBox20Edit.Text = this.RecordedMethod1Params.UITextBox20EditText;

            // Type '1' in 'textBox21' text box
            uITextBox21Edit.Text = this.RecordedMethod1Params.UITextBox21EditText;

            // Click '0' window
            Mouse.Click(uIItem0Window, new Point(48, 1));

            // Type '11' in 'textBox21' text box
            uITextBox21Edit.Text = this.RecordedMethod1Params.UITextBox21EditText1;

            // Type '1' in 'textBox22' text box
            uITextBox22Edit.Text = this.RecordedMethod1Params.UITextBox22EditText;

            // Type '1' in 'textBox23' text box
            uITextBox23Edit.Text = this.RecordedMethod1Params.UITextBox23EditText;

            // Click 'Pump Factor' button
            Mouse.Click(uIPumpFactorButton, new Point(74, 42));
        }
        
        /// <summary>
        /// BHAClearRecording - Use 'BHAClearRecordingParams' to pass parameters into this method.
        /// </summary>
        public void BHAClearRecording()
        {
            #region Variable Declarations
            WinTabPage uIBHATabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UIBHATabPage;
            WinEdit uITextBox44Edit = this.UIDrillingCalculatorWindow.UIItem0Window7.UITextBox44Edit;
            WinEdit uITextBox46Edit = this.UIDrillingCalculatorWindow.UIItem0Window12.UITextBox46Edit;
            WinEdit uITextBox47Edit = this.UIDrillingCalculatorWindow.UIItem0Window22.UITextBox47Edit;
            WinButton uIClearButton = this.UIDrillingCalculatorWindow.UIClearWindow.UIClearButton;
            WinButton uIClearButton1 = this.UIDrillingCalculatorWindow.UIClearWindow1.UIClearButton;
            WinButton uIClearButton2 = this.UIDrillingCalculatorWindow.UIClearWindow2.UIClearButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.BHAClearRecordingParams.UIDrillingCalculatorWindowExePath, this.BHAClearRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'BHA' tab
            Mouse.Click(uIBHATabPage, new Point(6, 15));

            // Type '333333' in 'textBox44' text box
            uITextBox44Edit.Text = this.BHAClearRecordingParams.UITextBox44EditText;

            // Type '4444444' in 'textBox46' text box
            uITextBox46Edit.Text = this.BHAClearRecordingParams.UITextBox46EditText;

            // Type '5555555' in 'textBox47' text box
            uITextBox47Edit.Text = this.BHAClearRecordingParams.UITextBox47EditText;

            // Click 'clear' button
            Mouse.Click(uIClearButton, new Point(17, 12));

            // Click 'clear' button
            Mouse.Click(uIClearButton1, new Point(21, 10));

            // Click 'clear' button
            Mouse.Click(uIClearButton2, new Point(24, 4));
        }
        
        /// <summary>
        /// BHAClearAssertion - Use 'BHAClearAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BHAClearAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox44Edit = this.UIDrillingCalculatorWindow.UIItem0Window7.UITextBox44Edit;
            WinEdit uITextBox46Edit = this.UIDrillingCalculatorWindow.UIItem0Window12.UITextBox46Edit;
            WinEdit uITextBox47Edit = this.UIDrillingCalculatorWindow.UIItem0Window22.UITextBox47Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox44' text box equals '0'
            Assert.AreEqual(this.BHAClearAssertionExpectedValues.UITextBox44EditText, uITextBox44Edit.Text);

            // Verify that the 'Text' property of 'textBox46' text box equals '0'
            Assert.AreEqual(this.BHAClearAssertionExpectedValues.UITextBox46EditText, uITextBox46Edit.Text);

            // Verify that the 'Text' property of 'textBox47' text box equals '0'
            Assert.AreEqual(this.BHAClearAssertionExpectedValues.UITextBox47EditText, uITextBox47Edit.Text);
        }
        
        /// <summary>
        /// TonMilesClearRecording - Use 'TonMilesClearRecordingParams' to pass parameters into this method.
        /// </summary>
        public void TonMilesClearRecording()
        {
            #region Variable Declarations
            WinTabPage uITonMilesTabPage = this.UIDrillingCalculatorWindow.UITabControl1Window.UITonMilesTabPage;
            WinEdit uITextBox99Edit = this.UIDrillingCalculatorWindow.UIItem0Window3.UITextBox99Edit;
            WinEdit uITextBox100Edit = this.UIDrillingCalculatorWindow.UIItem0Window11.UITextBox100Edit;
            WinEdit uITextBox101Edit = this.UIDrillingCalculatorWindow.UIItem0Window21.UITextBox101Edit;
            WinEdit uITextBox102Edit = this.UIDrillingCalculatorWindow.UIItem0Window31.UITextBox102Edit;
            WinEdit uITextBox103Edit = this.UIDrillingCalculatorWindow.UIItem0Window4.UITextBox103Edit;
            WinEdit uITextBox104Edit = this.UIDrillingCalculatorWindow.UIItem0Window5.UITextBox104Edit;
            WinEdit uITextBox105Edit = this.UIDrillingCalculatorWindow.UIItem0Window6.UITextBox105Edit;
            WinButton uIClearButton = this.UIDrillingCalculatorWindow.UIClearWindow3.UIClearButton;
            WinButton uIClearButton1 = this.UIDrillingCalculatorWindow.UIClearWindow11.UIClearButton;
            WinButton uIClearButton2 = this.UIDrillingCalculatorWindow.UIClearWindow21.UIClearButton;
            WinButton uIClearButton3 = this.UIDrillingCalculatorWindow.UIClearWindow31.UIClearButton;
            WinButton uIClearButton4 = this.UIDrillingCalculatorWindow.UIClearWindow4.UIClearButton;
            WinButton uIClearButton5 = this.UIDrillingCalculatorWindow.UIClearWindow5.UIClearButton;
            WinButton uIClearButton6 = this.UIDrillingCalculatorWindow.UIClearWindow6.UIClearButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
            ApplicationUnderTest uIDrillingCalculatorWindow = ApplicationUnderTest.Launch(this.TonMilesClearRecordingParams.UIDrillingCalculatorWindowExePath, this.TonMilesClearRecordingParams.UIDrillingCalculatorWindowAlternateExePath);

            // Click 'Ton Miles' tab
            Mouse.Click(uITonMilesTabPage, new Point(16, 6));

            // Type '111111' in 'textBox99' text box
            uITextBox99Edit.Text = this.TonMilesClearRecordingParams.UITextBox99EditText;

            // Type '222222' in 'textBox100' text box
            uITextBox100Edit.Text = this.TonMilesClearRecordingParams.UITextBox100EditText;

            // Type '333333' in 'textBox101' text box
            uITextBox101Edit.Text = this.TonMilesClearRecordingParams.UITextBox101EditText;

            // Type '444444' in 'textBox102' text box
            uITextBox102Edit.Text = this.TonMilesClearRecordingParams.UITextBox102EditText;

            // Type '55555' in 'textBox103' text box
            uITextBox103Edit.Text = this.TonMilesClearRecordingParams.UITextBox103EditText;

            // Type '666666' in 'textBox104' text box
            uITextBox104Edit.Text = this.TonMilesClearRecordingParams.UITextBox104EditText;

            // Type '777777' in 'textBox105' text box
            uITextBox105Edit.Text = this.TonMilesClearRecordingParams.UITextBox105EditText;

            // Click 'clear' button
            Mouse.Click(uIClearButton, new Point(23, 15));

            // Click 'clear' button
            Mouse.Click(uIClearButton1, new Point(18, 12));

            // Click 'clear' button
            Mouse.Click(uIClearButton2, new Point(21, 7));

            // Click 'clear' button
            Mouse.Click(uIClearButton3, new Point(16, 5));

            // Click 'clear' button
            Mouse.Click(uIClearButton4, new Point(29, 12));

            // Click 'clear' button
            Mouse.Click(uIClearButton5, new Point(23, 12));

            // Click 'clear' button
            Mouse.Click(uIClearButton6, new Point(28, 9));
        }
        
        /// <summary>
        /// TonMilesClearAssertion - Use 'TonMilesClearAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TonMilesClearAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox99Edit = this.UIDrillingCalculatorWindow.UIItem0Window3.UITextBox99Edit;
            WinEdit uITextBox100Edit = this.UIDrillingCalculatorWindow.UIItem0Window11.UITextBox100Edit;
            WinEdit uITextBox101Edit = this.UIDrillingCalculatorWindow.UIItem0Window21.UITextBox101Edit;
            WinEdit uITextBox102Edit = this.UIDrillingCalculatorWindow.UIItem0Window31.UITextBox102Edit;
            WinEdit uITextBox103Edit = this.UIDrillingCalculatorWindow.UIItem0Window4.UITextBox103Edit;
            WinEdit uITextBox104Edit = this.UIDrillingCalculatorWindow.UIItem0Window5.UITextBox104Edit;
            WinEdit uITextBox105Edit = this.UIDrillingCalculatorWindow.UIItem0Window6.UITextBox105Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox99' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox99EditText, uITextBox99Edit.Text);

            // Verify that the 'Text' property of 'textBox100' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox100EditText, uITextBox100Edit.Text);

            // Verify that the 'Text' property of 'textBox101' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox101EditText, uITextBox101Edit.Text);

            // Verify that the 'Text' property of 'textBox102' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox102EditText, uITextBox102Edit.Text);

            // Verify that the 'Text' property of 'textBox103' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox103EditText, uITextBox103Edit.Text);

            // Verify that the 'Text' property of 'textBox104' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox104EditText, uITextBox104Edit.Text);

            // Verify that the 'Text' property of 'textBox105' text box equals '0'
            Assert.AreEqual(this.TonMilesClearAssertionExpectedValues.UITextBox105EditText, uITextBox105Edit.Text);
        }
        
        /// <summary>
        /// TonMilesNegAssertion - Use 'TonMilesNegAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TonMilesNegAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox111Edit = this.UIDrillingCalculatorWindow.UITextBox111Window.UITextBox111Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox111' text box equals '7.34443673374971E-07'
            Assert.AreEqual(this.TonMilesNegAssertionExpectedValues.UITextBox111EditText, uITextBox111Edit.Text);
        }
        
        /// <summary>
        /// TonMilesPosAssertion - Use 'TonMilesPosAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TonMilesPosAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox111Edit = this.UIDrillingCalculatorWindow.UITextBox111Window.UITextBox111Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox111' text box equals '1.49201943095073E-06'
            Assert.AreEqual(this.TonMilesPosAssertionExpectedValues.UITextBox111EditText, uITextBox111Edit.Text);
        }
        
        #region Properties
        public virtual PumpFactorRecordingParams PumpFactorRecordingParams
        {
            get
            {
                if ((this.mPumpFactorRecordingParams == null))
                {
                    this.mPumpFactorRecordingParams = new PumpFactorRecordingParams();
                }
                return this.mPumpFactorRecordingParams;
            }
        }
        
        public virtual PumpFactorAssertionExpectedValues PumpFactorAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorAssertionExpectedValues == null))
                {
                    this.mPumpFactorAssertionExpectedValues = new PumpFactorAssertionExpectedValues();
                }
                return this.mPumpFactorAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorZeroRecordingParams PumpFactorZeroRecordingParams
        {
            get
            {
                if ((this.mPumpFactorZeroRecordingParams == null))
                {
                    this.mPumpFactorZeroRecordingParams = new PumpFactorZeroRecordingParams();
                }
                return this.mPumpFactorZeroRecordingParams;
            }
        }
        
        public virtual PumpFactorZeroAssertionExpectedValues PumpFactorZeroAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorZeroAssertionExpectedValues == null))
                {
                    this.mPumpFactorZeroAssertionExpectedValues = new PumpFactorZeroAssertionExpectedValues();
                }
                return this.mPumpFactorZeroAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorNegRecordingParams PumpFactorNegRecordingParams
        {
            get
            {
                if ((this.mPumpFactorNegRecordingParams == null))
                {
                    this.mPumpFactorNegRecordingParams = new PumpFactorNegRecordingParams();
                }
                return this.mPumpFactorNegRecordingParams;
            }
        }
        
        public virtual PumpFactorNegAssertionExpectedValues PumpFactorNegAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorNegAssertionExpectedValues == null))
                {
                    this.mPumpFactorNegAssertionExpectedValues = new PumpFactorNegAssertionExpectedValues();
                }
                return this.mPumpFactorNegAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorPosRecordingParams PumpFactorPosRecordingParams
        {
            get
            {
                if ((this.mPumpFactorPosRecordingParams == null))
                {
                    this.mPumpFactorPosRecordingParams = new PumpFactorPosRecordingParams();
                }
                return this.mPumpFactorPosRecordingParams;
            }
        }
        
        public virtual PumpFactorPosAssertionExpectedValues PumpFactorPosAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorPosAssertionExpectedValues == null))
                {
                    this.mPumpFactorPosAssertionExpectedValues = new PumpFactorPosAssertionExpectedValues();
                }
                return this.mPumpFactorPosAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorNegTriplexRecordingParams PumpFactorNegTriplexRecordingParams
        {
            get
            {
                if ((this.mPumpFactorNegTriplexRecordingParams == null))
                {
                    this.mPumpFactorNegTriplexRecordingParams = new PumpFactorNegTriplexRecordingParams();
                }
                return this.mPumpFactorNegTriplexRecordingParams;
            }
        }
        
        public virtual PumpFactorNegTriplexAssertionExpectedValues PumpFactorNegTriplexAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorNegTriplexAssertionExpectedValues == null))
                {
                    this.mPumpFactorNegTriplexAssertionExpectedValues = new PumpFactorNegTriplexAssertionExpectedValues();
                }
                return this.mPumpFactorNegTriplexAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorZeroTriplexRecordingParams PumpFactorZeroTriplexRecordingParams
        {
            get
            {
                if ((this.mPumpFactorZeroTriplexRecordingParams == null))
                {
                    this.mPumpFactorZeroTriplexRecordingParams = new PumpFactorZeroTriplexRecordingParams();
                }
                return this.mPumpFactorZeroTriplexRecordingParams;
            }
        }
        
        public virtual PumpFactorZeroTriplexAssertionExpectedValues PumpFactorZeroTriplexAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorZeroTriplexAssertionExpectedValues == null))
                {
                    this.mPumpFactorZeroTriplexAssertionExpectedValues = new PumpFactorZeroTriplexAssertionExpectedValues();
                }
                return this.mPumpFactorZeroTriplexAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorPosTriplexRecordingParams PumpFactorPosTriplexRecordingParams
        {
            get
            {
                if ((this.mPumpFactorPosTriplexRecordingParams == null))
                {
                    this.mPumpFactorPosTriplexRecordingParams = new PumpFactorPosTriplexRecordingParams();
                }
                return this.mPumpFactorPosTriplexRecordingParams;
            }
        }
        
        public virtual PumpFactorPosTriplexAssertionExpectedValues PumpFactorPosTriplexAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorPosTriplexAssertionExpectedValues == null))
                {
                    this.mPumpFactorPosTriplexAssertionExpectedValues = new PumpFactorPosTriplexAssertionExpectedValues();
                }
                return this.mPumpFactorPosTriplexAssertionExpectedValues;
            }
        }
        
        public virtual PumpFactorConvertRecordingParams PumpFactorConvertRecordingParams
        {
            get
            {
                if ((this.mPumpFactorConvertRecordingParams == null))
                {
                    this.mPumpFactorConvertRecordingParams = new PumpFactorConvertRecordingParams();
                }
                return this.mPumpFactorConvertRecordingParams;
            }
        }
        
        public virtual PumpFactorConvertAssertionExpectedValues PumpFactorConvertAssertionExpectedValues
        {
            get
            {
                if ((this.mPumpFactorConvertAssertionExpectedValues == null))
                {
                    this.mPumpFactorConvertAssertionExpectedValues = new PumpFactorConvertAssertionExpectedValues();
                }
                return this.mPumpFactorConvertAssertionExpectedValues;
            }
        }
        
        public virtual TonMilesZeroRecordingParams TonMilesZeroRecordingParams
        {
            get
            {
                if ((this.mTonMilesZeroRecordingParams == null))
                {
                    this.mTonMilesZeroRecordingParams = new TonMilesZeroRecordingParams();
                }
                return this.mTonMilesZeroRecordingParams;
            }
        }
        
        public virtual TonMilesZeroAssertionExpectedValues TonMilesZeroAssertionExpectedValues
        {
            get
            {
                if ((this.mTonMilesZeroAssertionExpectedValues == null))
                {
                    this.mTonMilesZeroAssertionExpectedValues = new TonMilesZeroAssertionExpectedValues();
                }
                return this.mTonMilesZeroAssertionExpectedValues;
            }
        }
        
        public virtual TonMilesNegRecordingParams TonMilesNegRecordingParams
        {
            get
            {
                if ((this.mTonMilesNegRecordingParams == null))
                {
                    this.mTonMilesNegRecordingParams = new TonMilesNegRecordingParams();
                }
                return this.mTonMilesNegRecordingParams;
            }
        }
        
        public virtual TonMilesPosRecordingParams TonMilesPosRecordingParams
        {
            get
            {
                if ((this.mTonMilesPosRecordingParams == null))
                {
                    this.mTonMilesPosRecordingParams = new TonMilesPosRecordingParams();
                }
                return this.mTonMilesPosRecordingParams;
            }
        }
        
        public virtual BHAZeroParams BHAZeroParams
        {
            get
            {
                if ((this.mBHAZeroParams == null))
                {
                    this.mBHAZeroParams = new BHAZeroParams();
                }
                return this.mBHAZeroParams;
            }
        }
        
        public virtual BHAZeroAssertionExpectedValues BHAZeroAssertionExpectedValues
        {
            get
            {
                if ((this.mBHAZeroAssertionExpectedValues == null))
                {
                    this.mBHAZeroAssertionExpectedValues = new BHAZeroAssertionExpectedValues();
                }
                return this.mBHAZeroAssertionExpectedValues;
            }
        }
        
        public virtual BHANegRecordingParams BHANegRecordingParams
        {
            get
            {
                if ((this.mBHANegRecordingParams == null))
                {
                    this.mBHANegRecordingParams = new BHANegRecordingParams();
                }
                return this.mBHANegRecordingParams;
            }
        }
        
        public virtual BHANegAssertionExpectedValues BHANegAssertionExpectedValues
        {
            get
            {
                if ((this.mBHANegAssertionExpectedValues == null))
                {
                    this.mBHANegAssertionExpectedValues = new BHANegAssertionExpectedValues();
                }
                return this.mBHANegAssertionExpectedValues;
            }
        }
        
        public virtual BHAPosRecordingParams BHAPosRecordingParams
        {
            get
            {
                if ((this.mBHAPosRecordingParams == null))
                {
                    this.mBHAPosRecordingParams = new BHAPosRecordingParams();
                }
                return this.mBHAPosRecordingParams;
            }
        }
        
        public virtual BHAPosAssertionExpectedValues BHAPosAssertionExpectedValues
        {
            get
            {
                if ((this.mBHAPosAssertionExpectedValues == null))
                {
                    this.mBHAPosAssertionExpectedValues = new BHAPosAssertionExpectedValues();
                }
                return this.mBHAPosAssertionExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual BHAClearRecordingParams BHAClearRecordingParams
        {
            get
            {
                if ((this.mBHAClearRecordingParams == null))
                {
                    this.mBHAClearRecordingParams = new BHAClearRecordingParams();
                }
                return this.mBHAClearRecordingParams;
            }
        }
        
        public virtual BHAClearAssertionExpectedValues BHAClearAssertionExpectedValues
        {
            get
            {
                if ((this.mBHAClearAssertionExpectedValues == null))
                {
                    this.mBHAClearAssertionExpectedValues = new BHAClearAssertionExpectedValues();
                }
                return this.mBHAClearAssertionExpectedValues;
            }
        }
        
        public virtual TonMilesClearRecordingParams TonMilesClearRecordingParams
        {
            get
            {
                if ((this.mTonMilesClearRecordingParams == null))
                {
                    this.mTonMilesClearRecordingParams = new TonMilesClearRecordingParams();
                }
                return this.mTonMilesClearRecordingParams;
            }
        }
        
        public virtual TonMilesClearAssertionExpectedValues TonMilesClearAssertionExpectedValues
        {
            get
            {
                if ((this.mTonMilesClearAssertionExpectedValues == null))
                {
                    this.mTonMilesClearAssertionExpectedValues = new TonMilesClearAssertionExpectedValues();
                }
                return this.mTonMilesClearAssertionExpectedValues;
            }
        }
        
        public virtual TonMilesNegAssertionExpectedValues TonMilesNegAssertionExpectedValues
        {
            get
            {
                if ((this.mTonMilesNegAssertionExpectedValues == null))
                {
                    this.mTonMilesNegAssertionExpectedValues = new TonMilesNegAssertionExpectedValues();
                }
                return this.mTonMilesNegAssertionExpectedValues;
            }
        }
        
        public virtual TonMilesPosAssertionExpectedValues TonMilesPosAssertionExpectedValues
        {
            get
            {
                if ((this.mTonMilesPosAssertionExpectedValues == null))
                {
                    this.mTonMilesPosAssertionExpectedValues = new TonMilesPosAssertionExpectedValues();
                }
                return this.mTonMilesPosAssertionExpectedValues;
            }
        }
        
        public UIDrillingCalculatorWindow UIDrillingCalculatorWindow
        {
            get
            {
                if ((this.mUIDrillingCalculatorWindow == null))
                {
                    this.mUIDrillingCalculatorWindow = new UIDrillingCalculatorWindow();
                }
                return this.mUIDrillingCalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private PumpFactorRecordingParams mPumpFactorRecordingParams;
        
        private PumpFactorAssertionExpectedValues mPumpFactorAssertionExpectedValues;
        
        private PumpFactorZeroRecordingParams mPumpFactorZeroRecordingParams;
        
        private PumpFactorZeroAssertionExpectedValues mPumpFactorZeroAssertionExpectedValues;
        
        private PumpFactorNegRecordingParams mPumpFactorNegRecordingParams;
        
        private PumpFactorNegAssertionExpectedValues mPumpFactorNegAssertionExpectedValues;
        
        private PumpFactorPosRecordingParams mPumpFactorPosRecordingParams;
        
        private PumpFactorPosAssertionExpectedValues mPumpFactorPosAssertionExpectedValues;
        
        private PumpFactorNegTriplexRecordingParams mPumpFactorNegTriplexRecordingParams;
        
        private PumpFactorNegTriplexAssertionExpectedValues mPumpFactorNegTriplexAssertionExpectedValues;
        
        private PumpFactorZeroTriplexRecordingParams mPumpFactorZeroTriplexRecordingParams;
        
        private PumpFactorZeroTriplexAssertionExpectedValues mPumpFactorZeroTriplexAssertionExpectedValues;
        
        private PumpFactorPosTriplexRecordingParams mPumpFactorPosTriplexRecordingParams;
        
        private PumpFactorPosTriplexAssertionExpectedValues mPumpFactorPosTriplexAssertionExpectedValues;
        
        private PumpFactorConvertRecordingParams mPumpFactorConvertRecordingParams;
        
        private PumpFactorConvertAssertionExpectedValues mPumpFactorConvertAssertionExpectedValues;
        
        private TonMilesZeroRecordingParams mTonMilesZeroRecordingParams;
        
        private TonMilesZeroAssertionExpectedValues mTonMilesZeroAssertionExpectedValues;
        
        private TonMilesNegRecordingParams mTonMilesNegRecordingParams;
        
        private TonMilesPosRecordingParams mTonMilesPosRecordingParams;
        
        private BHAZeroParams mBHAZeroParams;
        
        private BHAZeroAssertionExpectedValues mBHAZeroAssertionExpectedValues;
        
        private BHANegRecordingParams mBHANegRecordingParams;
        
        private BHANegAssertionExpectedValues mBHANegAssertionExpectedValues;
        
        private BHAPosRecordingParams mBHAPosRecordingParams;
        
        private BHAPosAssertionExpectedValues mBHAPosAssertionExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private BHAClearRecordingParams mBHAClearRecordingParams;
        
        private BHAClearAssertionExpectedValues mBHAClearAssertionExpectedValues;
        
        private TonMilesClearRecordingParams mTonMilesClearRecordingParams;
        
        private TonMilesClearAssertionExpectedValues mTonMilesClearAssertionExpectedValues;
        
        private TonMilesNegAssertionExpectedValues mTonMilesNegAssertionExpectedValues;
        
        private TonMilesPosAssertionExpectedValues mTonMilesPosAssertionExpectedValues;
        
        private UIDrillingCalculatorWindow mUIDrillingCalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '2' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "2";
        
        /// <summary>
        /// Type '2' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "2";
        
        /// <summary>
        /// Type '2' in 'textBox21' text box
        /// </summary>
        public string UITextBox21EditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '12'
        /// </summary>
        public string UITextBox26EditText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '12'
        /// </summary>
        public string UITextBox26EditText1 = "12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorZeroRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorZeroRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '0' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "0";
        
        /// <summary>
        /// Type '0' in 'textBox21' text box
        /// </summary>
        public string UITextBox21EditText = "0";
        
        /// <summary>
        /// Type '0' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorZeroAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorZeroAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '0'
        /// </summary>
        public string UITextBox26EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '0'
        /// </summary>
        public string UITextBox27EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox28' text box equals '0'
        /// </summary>
        public string UITextBox28EditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorNegRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorNegRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '-1' in 'textBox23' text box
        /// </summary>
        public string UITextBox23EditText = "-1";
        
        /// <summary>
        /// Type '-1' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "-1";
        
        /// <summary>
        /// Type '-2' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "-2";
        
        /// <summary>
        /// Type '-3' in 'textBox21' text box
        /// </summary>
        public string UITextBox21EditText = "-3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorNegAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorNegAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '-1.570796'
        /// </summary>
        public string UITextBox26EditText = "-1.570796";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '-0.0067999'
        /// </summary>
        public string UITextBox27EditText = "-0.0067999";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox28' text box equals '-0.0001619043'
        /// </summary>
        public string UITextBox28EditText = "-0.0001619043";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorPosRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorPosRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '3' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "3";
        
        /// <summary>
        /// Type '2' in 'textBox21' text box
        /// </summary>
        public string UITextBox21EditText = "2";
        
        /// <summary>
        /// Type '1' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorPosAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorPosAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '22'
        /// </summary>
        public string UITextBox26EditText = "22";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '0.0951997773815088'
        /// </summary>
        public string UITextBox27EditText = "0.0951997773815088";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '21.991148575128552'
        /// </summary>
        public string UITextBox26EditText1 = "21.991148575128552";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox28' text box equals '0.0022666613662264'
        /// </summary>
        public string UITextBox28EditText = "0.0022666613662264";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorNegTriplexRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorNegTriplexRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Select 'Triplex' radio button
        /// </summary>
        public bool UITriplexRadioButtonSelected = true;
        
        /// <summary>
        /// Type '-2' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "-2";
        
        /// <summary>
        /// Type '-1' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "-1";
        
        /// <summary>
        /// Type '-1' in 'textBox23' text box
        /// </summary>
        public string UITextBox23EditText = "-1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorNegTriplexAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorNegTriplexAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '9.42857142857143'
        /// </summary>
        public string UITextBox26EditText = "9.42857142857143";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '0.0408163265306122'
        /// </summary>
        public string UITextBox27EditText = "0.0408163265306122";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox28' text box equals '0.000971817298347911'
        /// </summary>
        public string UITextBox28EditText = "0.000971817298347911";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorZeroTriplexRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorZeroTriplexRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Select 'Triplex' radio button
        /// </summary>
        public bool UITriplexRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorZeroTriplexAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorZeroTriplexAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '0'
        /// </summary>
        public string UITextBox26EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '0'
        /// </summary>
        public string UITextBox27EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox28' text box equals '0'
        /// </summary>
        public string UITextBox28EditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorPosTriplexRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorPosTriplexRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Select 'Triplex' radio button
        /// </summary>
        public bool UITriplexRadioButtonSelected = true;
        
        /// <summary>
        /// Type '2' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "2";
        
        /// <summary>
        /// Type '1' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorPosTriplexAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorPosTriplexAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '9.42857142857143'
        /// </summary>
        public string UITextBox26EditText = "9.42857142857143";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '0.0408163265306122'
        /// </summary>
        public string UITextBox27EditText = "0.0408163265306122";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'textBox28' text box equals 'Edit'
        /// </summary>
        public string UITextBox28EditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorConvertRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorConvertRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Select 'Triplex' radio button
        /// </summary>
        public bool UITriplexRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'cm' radio button
        /// </summary>
        public bool UICMRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'cm' radio button
        /// </summary>
        public bool UICMRadioButtonSelected1 = true;
        
        /// <summary>
        /// Type '2' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "2";
        
        /// <summary>
        /// Type '1' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PumpFactorConvertAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class PumpFactorConvertAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox26' text box equals '0.575363277842571'
        /// </summary>
        public string UITextBox26EditText = "0.575363277842571";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox27' text box equals '0.00249075012053061'
        /// </summary>
        public string UITextBox27EditText = "0.00249075012053061";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox28' text box equals '5.93035742983479E-05'
        /// </summary>
        public string UITextBox28EditText = "5.93035742983479E-05";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesZeroRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesZeroRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesZeroAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesZeroAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox111' text box equals '0'
        /// </summary>
        public string UITextBox111EditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesNegRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesNegRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '-1' in 'textBox99' text box
        /// </summary>
        public string UITextBox99EditText = "-1";
        
        /// <summary>
        /// Type '-2' in 'textBox100' text box
        /// </summary>
        public string UITextBox100EditText = "-2";
        
        /// <summary>
        /// Type '-3' in 'textBox101' text box
        /// </summary>
        public string UITextBox101EditText = "-3";
        
        /// <summary>
        /// Type '-4' in 'textBox102' text box
        /// </summary>
        public string UITextBox102EditText = "-4";
        
        /// <summary>
        /// Type '-5' in 'textBox103' text box
        /// </summary>
        public string UITextBox103EditText = "-5";
        
        /// <summary>
        /// Type '-6' in 'textBox104' text box
        /// </summary>
        public string UITextBox104EditText = "-6";
        
        /// <summary>
        /// Type '-7' in 'textBox105' text box
        /// </summary>
        public string UITextBox105EditText = "-7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesPosRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesPosRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '1' in 'textBox99' text box
        /// </summary>
        public string UITextBox99EditText = "1";
        
        /// <summary>
        /// Type '2' in 'textBox100' text box
        /// </summary>
        public string UITextBox100EditText = "2";
        
        /// <summary>
        /// Type '3' in 'textBox101' text box
        /// </summary>
        public string UITextBox101EditText = "3";
        
        /// <summary>
        /// Type '4' in 'textBox102' text box
        /// </summary>
        public string UITextBox102EditText = "4";
        
        /// <summary>
        /// Type '5' in 'textBox103' text box
        /// </summary>
        public string UITextBox103EditText = "5";
        
        /// <summary>
        /// Type '6' in 'textBox104' text box
        /// </summary>
        public string UITextBox104EditText = "6";
        
        /// <summary>
        /// Type '7' in 'textBox105' text box
        /// </summary>
        public string UITextBox105EditText = "7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHAZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHAZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHAZeroAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHAZeroAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox51' text box equals '1'
        /// </summary>
        public string UITextBox51EditText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox50' text box equals 'NaN'
        /// </summary>
        public string UITextBox50EditText = "NaN";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox49' text box equals 'NaN'
        /// </summary>
        public string UITextBox49EditText = "NaN";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox52' text box equals 'NaN'
        /// </summary>
        public string UITextBox52EditText = "NaN";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHANegRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHANegRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '-1' in 'textBox44' text box
        /// </summary>
        public string UITextBox44EditText = "-1";
        
        /// <summary>
        /// Type '-2' in 'textBox46' text box
        /// </summary>
        public string UITextBox46EditText = "-2";
        
        /// <summary>
        /// Type '-3' in 'textBox47' text box
        /// </summary>
        public string UITextBox47EditText = "-3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHANegAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHANegAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox51' text box equals '1.04580152671756'
        /// </summary>
        public string UITextBox51EditText = "1.04580152671756";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox50' text box equals '0.562473164448261'
        /// </summary>
        public string UITextBox50EditText = "0.562473164448261";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox49' text box equals '0.17144182052383'
        /// </summary>
        public string UITextBox49EditText = "0.17144182052383";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox52' text box equals '0.0181442956273633'
        /// </summary>
        public string UITextBox52EditText = "0.0181442956273633";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHAPosRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHAPosRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '1' in 'textBox44' text box
        /// </summary>
        public string UITextBox44EditText = "1";
        
        /// <summary>
        /// Type '2' in 'textBox46' text box
        /// </summary>
        public string UITextBox46EditText = "2";
        
        /// <summary>
        /// Type '3' in 'textBox47' text box
        /// </summary>
        public string UITextBox47EditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHAPosAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHAPosAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox51' text box equals '0.954198473282443'
        /// </summary>
        public string UITextBox51EditText = "0.954198473282443";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox50' text box equals '0.616470588235294'
        /// </summary>
        public string UITextBox50EditText = "0.616470588235294";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox49' text box equals '0.187900235294118'
        /// </summary>
        public string UITextBox49EditText = "0.187900235294118";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox52' text box equals '0.0198861480075901'
        /// </summary>
        public string UITextBox52EditText = "0.0198861480075901";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '1' in 'textBox20' text box
        /// </summary>
        public string UITextBox20EditText = "1";
        
        /// <summary>
        /// Type '1' in 'textBox21' text box
        /// </summary>
        public string UITextBox21EditText = "1";
        
        /// <summary>
        /// Type '11' in 'textBox21' text box
        /// </summary>
        public string UITextBox21EditText1 = "11";
        
        /// <summary>
        /// Type '1' in 'textBox22' text box
        /// </summary>
        public string UITextBox22EditText = "1";
        
        /// <summary>
        /// Type '1' in 'textBox23' text box
        /// </summary>
        public string UITextBox23EditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHAClearRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHAClearRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '333333' in 'textBox44' text box
        /// </summary>
        public string UITextBox44EditText = "333333";
        
        /// <summary>
        /// Type '4444444' in 'textBox46' text box
        /// </summary>
        public string UITextBox46EditText = "4444444";
        
        /// <summary>
        /// Type '5555555' in 'textBox47' text box
        /// </summary>
        public string UITextBox47EditText = "5555555";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BHAClearAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class BHAClearAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox44' text box equals '0'
        /// </summary>
        public string UITextBox44EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox46' text box equals '0'
        /// </summary>
        public string UITextBox46EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox47' text box equals '0'
        /// </summary>
        public string UITextBox47EditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesClearRecording'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesClearRecordingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowExePath = "C:\\Users\\Mark\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Drilling Calculator.exe'
        /// </summary>
        public string UIDrillingCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Drilling Calculator.exe";
        
        /// <summary>
        /// Type '111111' in 'textBox99' text box
        /// </summary>
        public string UITextBox99EditText = "111111";
        
        /// <summary>
        /// Type '222222' in 'textBox100' text box
        /// </summary>
        public string UITextBox100EditText = "222222";
        
        /// <summary>
        /// Type '333333' in 'textBox101' text box
        /// </summary>
        public string UITextBox101EditText = "333333";
        
        /// <summary>
        /// Type '444444' in 'textBox102' text box
        /// </summary>
        public string UITextBox102EditText = "444444";
        
        /// <summary>
        /// Type '55555' in 'textBox103' text box
        /// </summary>
        public string UITextBox103EditText = "55555";
        
        /// <summary>
        /// Type '666666' in 'textBox104' text box
        /// </summary>
        public string UITextBox104EditText = "666666";
        
        /// <summary>
        /// Type '777777' in 'textBox105' text box
        /// </summary>
        public string UITextBox105EditText = "777777";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesClearAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesClearAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox99' text box equals '0'
        /// </summary>
        public string UITextBox99EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox100' text box equals '0'
        /// </summary>
        public string UITextBox100EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox101' text box equals '0'
        /// </summary>
        public string UITextBox101EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox102' text box equals '0'
        /// </summary>
        public string UITextBox102EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox103' text box equals '0'
        /// </summary>
        public string UITextBox103EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox104' text box equals '0'
        /// </summary>
        public string UITextBox104EditText = "0";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox105' text box equals '0'
        /// </summary>
        public string UITextBox105EditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesNegAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesNegAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox111' text box equals '7.34443673374971E-07'
        /// </summary>
        public string UITextBox111EditText = "7.34443673374971E-07";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TonMilesPosAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class TonMilesPosAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox111' text box equals '1.49201943095073E-06'
        /// </summary>
        public string UITextBox111EditText = "1.49201943095073E-06";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIDrillingCalculatorWindow : WinWindow
    {
        
        public UIDrillingCalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Drilling Calculator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public UITabControl1Window UITabControl1Window
        {
            get
            {
                if ((this.mUITabControl1Window == null))
                {
                    this.mUITabControl1Window = new UITabControl1Window(this);
                }
                return this.mUITabControl1Window;
            }
        }
        
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIItem0Window2 UIItem0Window2
        {
            get
            {
                if ((this.mUIItem0Window2 == null))
                {
                    this.mUIItem0Window2 = new UIItem0Window2(this);
                }
                return this.mUIItem0Window2;
            }
        }
        
        public UIItem0Window1 UIItem0Window1
        {
            get
            {
                if ((this.mUIItem0Window1 == null))
                {
                    this.mUIItem0Window1 = new UIItem0Window1(this);
                }
                return this.mUIItem0Window1;
            }
        }
        
        public UIPumpFactorWindow UIPumpFactorWindow
        {
            get
            {
                if ((this.mUIPumpFactorWindow == null))
                {
                    this.mUIPumpFactorWindow = new UIPumpFactorWindow(this);
                }
                return this.mUIPumpFactorWindow;
            }
        }
        
        public UITextBox26Window UITextBox26Window
        {
            get
            {
                if ((this.mUITextBox26Window == null))
                {
                    this.mUITextBox26Window = new UITextBox26Window(this);
                }
                return this.mUITextBox26Window;
            }
        }
        
        public UITextBox27Window UITextBox27Window
        {
            get
            {
                if ((this.mUITextBox27Window == null))
                {
                    this.mUITextBox27Window = new UITextBox27Window(this);
                }
                return this.mUITextBox27Window;
            }
        }
        
        public UITextBox28Window UITextBox28Window
        {
            get
            {
                if ((this.mUITextBox28Window == null))
                {
                    this.mUITextBox28Window = new UITextBox28Window(this);
                }
                return this.mUITextBox28Window;
            }
        }
        
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UITriplexWindow UITriplexWindow
        {
            get
            {
                if ((this.mUITriplexWindow == null))
                {
                    this.mUITriplexWindow = new UITriplexWindow(this);
                }
                return this.mUITriplexWindow;
            }
        }
        
        public UILinerLengthGroup UILinerLengthGroup
        {
            get
            {
                if ((this.mUILinerLengthGroup == null))
                {
                    this.mUILinerLengthGroup = new UILinerLengthGroup(this);
                }
                return this.mUILinerLengthGroup;
            }
        }
        
        public UILinerDiameterGroup UILinerDiameterGroup
        {
            get
            {
                if ((this.mUILinerDiameterGroup == null))
                {
                    this.mUILinerDiameterGroup = new UILinerDiameterGroup(this);
                }
                return this.mUILinerDiameterGroup;
            }
        }
        
        public UICMWindow UICMWindow
        {
            get
            {
                if ((this.mUICMWindow == null))
                {
                    this.mUICMWindow = new UICMWindow(this);
                }
                return this.mUICMWindow;
            }
        }
        
        public UICMWindow1 UICMWindow1
        {
            get
            {
                if ((this.mUICMWindow1 == null))
                {
                    this.mUICMWindow1 = new UICMWindow1(this);
                }
                return this.mUICMWindow1;
            }
        }
        
        public UITonMilesonRoundTripOWindow UITonMilesonRoundTripOWindow
        {
            get
            {
                if ((this.mUITonMilesonRoundTripOWindow == null))
                {
                    this.mUITonMilesonRoundTripOWindow = new UITonMilesonRoundTripOWindow(this);
                }
                return this.mUITonMilesonRoundTripOWindow;
            }
        }
        
        public UITextBox111Window UITextBox111Window
        {
            get
            {
                if ((this.mUITextBox111Window == null))
                {
                    this.mUITextBox111Window = new UITextBox111Window(this);
                }
                return this.mUITextBox111Window;
            }
        }
        
        public UIItem0Window3 UIItem0Window3
        {
            get
            {
                if ((this.mUIItem0Window3 == null))
                {
                    this.mUIItem0Window3 = new UIItem0Window3(this);
                }
                return this.mUIItem0Window3;
            }
        }
        
        public UIItem0Window11 UIItem0Window11
        {
            get
            {
                if ((this.mUIItem0Window11 == null))
                {
                    this.mUIItem0Window11 = new UIItem0Window11(this);
                }
                return this.mUIItem0Window11;
            }
        }
        
        public UIItem0Window21 UIItem0Window21
        {
            get
            {
                if ((this.mUIItem0Window21 == null))
                {
                    this.mUIItem0Window21 = new UIItem0Window21(this);
                }
                return this.mUIItem0Window21;
            }
        }
        
        public UIItem0Window31 UIItem0Window31
        {
            get
            {
                if ((this.mUIItem0Window31 == null))
                {
                    this.mUIItem0Window31 = new UIItem0Window31(this);
                }
                return this.mUIItem0Window31;
            }
        }
        
        public UIItem0Window4 UIItem0Window4
        {
            get
            {
                if ((this.mUIItem0Window4 == null))
                {
                    this.mUIItem0Window4 = new UIItem0Window4(this);
                }
                return this.mUIItem0Window4;
            }
        }
        
        public UIItem0Window5 UIItem0Window5
        {
            get
            {
                if ((this.mUIItem0Window5 == null))
                {
                    this.mUIItem0Window5 = new UIItem0Window5(this);
                }
                return this.mUIItem0Window5;
            }
        }
        
        public UIItem0Window6 UIItem0Window6
        {
            get
            {
                if ((this.mUIItem0Window6 == null))
                {
                    this.mUIItem0Window6 = new UIItem0Window6(this);
                }
                return this.mUIItem0Window6;
            }
        }
        
        public UIWeightfootofDrillPipGroup UIWeightfootofDrillPipGroup
        {
            get
            {
                if ((this.mUIWeightfootofDrillPipGroup == null))
                {
                    this.mUIWeightfootofDrillPipGroup = new UIWeightfootofDrillPipGroup(this);
                }
                return this.mUIWeightfootofDrillPipGroup;
            }
        }
        
        public UIBHAlengthWindow UIBHAlengthWindow
        {
            get
            {
                if ((this.mUIBHAlengthWindow == null))
                {
                    this.mUIBHAlengthWindow = new UIBHAlengthWindow(this);
                }
                return this.mUIBHAlengthWindow;
            }
        }
        
        public UITextBox51Window UITextBox51Window
        {
            get
            {
                if ((this.mUITextBox51Window == null))
                {
                    this.mUITextBox51Window = new UITextBox51Window(this);
                }
                return this.mUITextBox51Window;
            }
        }
        
        public UITextBox50Window UITextBox50Window
        {
            get
            {
                if ((this.mUITextBox50Window == null))
                {
                    this.mUITextBox50Window = new UITextBox50Window(this);
                }
                return this.mUITextBox50Window;
            }
        }
        
        public UITextBox49Window UITextBox49Window
        {
            get
            {
                if ((this.mUITextBox49Window == null))
                {
                    this.mUITextBox49Window = new UITextBox49Window(this);
                }
                return this.mUITextBox49Window;
            }
        }
        
        public UITextBox52Window UITextBox52Window
        {
            get
            {
                if ((this.mUITextBox52Window == null))
                {
                    this.mUITextBox52Window = new UITextBox52Window(this);
                }
                return this.mUITextBox52Window;
            }
        }
        
        public UIItem0Window7 UIItem0Window7
        {
            get
            {
                if ((this.mUIItem0Window7 == null))
                {
                    this.mUIItem0Window7 = new UIItem0Window7(this);
                }
                return this.mUIItem0Window7;
            }
        }
        
        public UIItem0Window12 UIItem0Window12
        {
            get
            {
                if ((this.mUIItem0Window12 == null))
                {
                    this.mUIItem0Window12 = new UIItem0Window12(this);
                }
                return this.mUIItem0Window12;
            }
        }
        
        public UIItem0Window22 UIItem0Window22
        {
            get
            {
                if ((this.mUIItem0Window22 == null))
                {
                    this.mUIItem0Window22 = new UIItem0Window22(this);
                }
                return this.mUIItem0Window22;
            }
        }
        
        public UIWeightfootofDrillColGroup UIWeightfootofDrillColGroup
        {
            get
            {
                if ((this.mUIWeightfootofDrillColGroup == null))
                {
                    this.mUIWeightfootofDrillColGroup = new UIWeightfootofDrillColGroup(this);
                }
                return this.mUIWeightfootofDrillColGroup;
            }
        }
        
        public UIClearWindow UIClearWindow
        {
            get
            {
                if ((this.mUIClearWindow == null))
                {
                    this.mUIClearWindow = new UIClearWindow(this);
                }
                return this.mUIClearWindow;
            }
        }
        
        public UIClearWindow1 UIClearWindow1
        {
            get
            {
                if ((this.mUIClearWindow1 == null))
                {
                    this.mUIClearWindow1 = new UIClearWindow1(this);
                }
                return this.mUIClearWindow1;
            }
        }
        
        public UIClearWindow2 UIClearWindow2
        {
            get
            {
                if ((this.mUIClearWindow2 == null))
                {
                    this.mUIClearWindow2 = new UIClearWindow2(this);
                }
                return this.mUIClearWindow2;
            }
        }
        
        public UIClearWindow3 UIClearWindow3
        {
            get
            {
                if ((this.mUIClearWindow3 == null))
                {
                    this.mUIClearWindow3 = new UIClearWindow3(this);
                }
                return this.mUIClearWindow3;
            }
        }
        
        public UIClearWindow11 UIClearWindow11
        {
            get
            {
                if ((this.mUIClearWindow11 == null))
                {
                    this.mUIClearWindow11 = new UIClearWindow11(this);
                }
                return this.mUIClearWindow11;
            }
        }
        
        public UIClearWindow21 UIClearWindow21
        {
            get
            {
                if ((this.mUIClearWindow21 == null))
                {
                    this.mUIClearWindow21 = new UIClearWindow21(this);
                }
                return this.mUIClearWindow21;
            }
        }
        
        public UIClearWindow31 UIClearWindow31
        {
            get
            {
                if ((this.mUIClearWindow31 == null))
                {
                    this.mUIClearWindow31 = new UIClearWindow31(this);
                }
                return this.mUIClearWindow31;
            }
        }
        
        public UIClearWindow4 UIClearWindow4
        {
            get
            {
                if ((this.mUIClearWindow4 == null))
                {
                    this.mUIClearWindow4 = new UIClearWindow4(this);
                }
                return this.mUIClearWindow4;
            }
        }
        
        public UIClearWindow5 UIClearWindow5
        {
            get
            {
                if ((this.mUIClearWindow5 == null))
                {
                    this.mUIClearWindow5 = new UIClearWindow5(this);
                }
                return this.mUIClearWindow5;
            }
        }
        
        public UIClearWindow6 UIClearWindow6
        {
            get
            {
                if ((this.mUIClearWindow6 == null))
                {
                    this.mUIClearWindow6 = new UIClearWindow6(this);
                }
                return this.mUIClearWindow6;
            }
        }
        #endregion
        
        #region Fields
        private UITabControl1Window mUITabControl1Window;
        
        private UIItem0Window mUIItem0Window;
        
        private UIItem0Window2 mUIItem0Window2;
        
        private UIItem0Window1 mUIItem0Window1;
        
        private UIPumpFactorWindow mUIPumpFactorWindow;
        
        private UITextBox26Window mUITextBox26Window;
        
        private UITextBox27Window mUITextBox27Window;
        
        private UITextBox28Window mUITextBox28Window;
        
        private UIItem1Window mUIItem1Window;
        
        private UITriplexWindow mUITriplexWindow;
        
        private UILinerLengthGroup mUILinerLengthGroup;
        
        private UILinerDiameterGroup mUILinerDiameterGroup;
        
        private UICMWindow mUICMWindow;
        
        private UICMWindow1 mUICMWindow1;
        
        private UITonMilesonRoundTripOWindow mUITonMilesonRoundTripOWindow;
        
        private UITextBox111Window mUITextBox111Window;
        
        private UIItem0Window3 mUIItem0Window3;
        
        private UIItem0Window11 mUIItem0Window11;
        
        private UIItem0Window21 mUIItem0Window21;
        
        private UIItem0Window31 mUIItem0Window31;
        
        private UIItem0Window4 mUIItem0Window4;
        
        private UIItem0Window5 mUIItem0Window5;
        
        private UIItem0Window6 mUIItem0Window6;
        
        private UIWeightfootofDrillPipGroup mUIWeightfootofDrillPipGroup;
        
        private UIBHAlengthWindow mUIBHAlengthWindow;
        
        private UITextBox51Window mUITextBox51Window;
        
        private UITextBox50Window mUITextBox50Window;
        
        private UITextBox49Window mUITextBox49Window;
        
        private UITextBox52Window mUITextBox52Window;
        
        private UIItem0Window7 mUIItem0Window7;
        
        private UIItem0Window12 mUIItem0Window12;
        
        private UIItem0Window22 mUIItem0Window22;
        
        private UIWeightfootofDrillColGroup mUIWeightfootofDrillColGroup;
        
        private UIClearWindow mUIClearWindow;
        
        private UIClearWindow1 mUIClearWindow1;
        
        private UIClearWindow2 mUIClearWindow2;
        
        private UIClearWindow3 mUIClearWindow3;
        
        private UIClearWindow11 mUIClearWindow11;
        
        private UIClearWindow21 mUIClearWindow21;
        
        private UIClearWindow31 mUIClearWindow31;
        
        private UIClearWindow4 mUIClearWindow4;
        
        private UIClearWindow5 mUIClearWindow5;
        
        private UIClearWindow6 mUIClearWindow6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITabControl1Window : WinWindow
    {
        
        public UITabControl1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl1";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIMudPumpsTabPage
        {
            get
            {
                if ((this.mUIMudPumpsTabPage == null))
                {
                    this.mUIMudPumpsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIMudPumpsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Mud Pumps";
                    this.mUIMudPumpsTabPage.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIMudPumpsTabPage;
            }
        }
        
        public WinTabPage UITonMilesTabPage
        {
            get
            {
                if ((this.mUITonMilesTabPage == null))
                {
                    this.mUITonMilesTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUITonMilesTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Ton Miles";
                    this.mUITonMilesTabPage.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITonMilesTabPage;
            }
        }
        
        public WinTabPage UIBHATabPage
        {
            get
            {
                if ((this.mUIBHATabPage == null))
                {
                    this.mUIBHATabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIBHATabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "BHA";
                    this.mUIBHATabPage.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIBHATabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIMudPumpsTabPage;
        
        private WinTabPage mUITonMilesTabPage;
        
        private WinTabPage mUIBHATabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox20";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox20Edit
        {
            get
            {
                if ((this.mUITextBox20Edit == null))
                {
                    this.mUITextBox20Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox20Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox20Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox20Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window2 : WinWindow
    {
        
        public UIItem0Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox22";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox22Edit
        {
            get
            {
                if ((this.mUITextBox22Edit == null))
                {
                    this.mUITextBox22Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox22Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox22Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox22Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window1 : WinWindow
    {
        
        public UIItem0Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox21";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox21Edit
        {
            get
            {
                if ((this.mUITextBox21Edit == null))
                {
                    this.mUITextBox21Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox21Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox21Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox21Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIPumpFactorWindow : WinWindow
    {
        
        public UIPumpFactorWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button19";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIPumpFactorButton
        {
            get
            {
                if ((this.mUIPumpFactorButton == null))
                {
                    this.mUIPumpFactorButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPumpFactorButton.SearchProperties[WinButton.PropertyNames.Name] = "Pump Factor";
                    this.mUIPumpFactorButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIPumpFactorButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPumpFactorButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox26Window : WinWindow
    {
        
        public UITextBox26Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox26";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox26Edit
        {
            get
            {
                if ((this.mUITextBox26Edit == null))
                {
                    this.mUITextBox26Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox26Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox26Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox26Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox27Window : WinWindow
    {
        
        public UITextBox27Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox27";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox27Edit
        {
            get
            {
                if ((this.mUITextBox27Edit == null))
                {
                    this.mUITextBox27Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox27Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox27Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox27Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox28Window : WinWindow
    {
        
        public UITextBox28Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox28";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox28Edit
        {
            get
            {
                if ((this.mUITextBox28Edit == null))
                {
                    this.mUITextBox28Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox28Edit.SearchProperties[WinEdit.PropertyNames.Name] = "cubic inch /stroke";
                    this.mUITextBox28Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox28Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox28Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox23";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox23Edit
        {
            get
            {
                if ((this.mUITextBox23Edit == null))
                {
                    this.mUITextBox23Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox23Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox23Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox23Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITriplexWindow : WinWindow
    {
        
        public UITriplexWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButton21";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UITriplexRadioButton
        {
            get
            {
                if ((this.mUITriplexRadioButton == null))
                {
                    this.mUITriplexRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUITriplexRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Triplex";
                    this.mUITriplexRadioButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITriplexRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUITriplexRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinerLengthGroup : WinGroup
    {
        
        public UILinerLengthGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Liner Length";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem0Window.SearchProperties[WinWindow.PropertyNames.Name] = "0";
                    this.mUIItem0Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIItem0Window.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIItem0Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItem0Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UILinerDiameterGroup : WinGroup
    {
        
        public UILinerDiameterGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Liner Diameter";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem0Window.SearchProperties[WinWindow.PropertyNames.Name] = "0";
                    this.mUIItem0Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIItem0Window.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIItem0Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItem0Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICMWindow : WinWindow
    {
        
        public UICMWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButton23";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UICMRadioButton
        {
            get
            {
                if ((this.mUICMRadioButton == null))
                {
                    this.mUICMRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUICMRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "cm";
                    this.mUICMRadioButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUICMRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUICMRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICMWindow1 : WinWindow
    {
        
        public UICMWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "radioButton27";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UICMRadioButton
        {
            get
            {
                if ((this.mUICMRadioButton == null))
                {
                    this.mUICMRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUICMRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "cm";
                    this.mUICMRadioButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUICMRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUICMRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITonMilesonRoundTripOWindow : WinWindow
    {
        
        public UITonMilesonRoundTripOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button96";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UITonMilesonRoundTripOButton
        {
            get
            {
                if ((this.mUITonMilesonRoundTripOButton == null))
                {
                    this.mUITonMilesonRoundTripOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITonMilesonRoundTripOButton.SearchProperties[WinButton.PropertyNames.Name] = "Ton Miles on Round Trip Operation (T1)";
                    this.mUITonMilesonRoundTripOButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITonMilesonRoundTripOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUITonMilesonRoundTripOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox111Window : WinWindow
    {
        
        public UITextBox111Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox111";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox111Edit
        {
            get
            {
                if ((this.mUITextBox111Edit == null))
                {
                    this.mUITextBox111Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox111Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox111Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox111Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window3 : WinWindow
    {
        
        public UIItem0Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox99";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox99Edit
        {
            get
            {
                if ((this.mUITextBox99Edit == null))
                {
                    this.mUITextBox99Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox99Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Required PumpCycles (pump out)";
                    this.mUITextBox99Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox99Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox99Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window11 : WinWindow
    {
        
        public UIItem0Window11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox100";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox100Edit
        {
            get
            {
                if ((this.mUITextBox100Edit == null))
                {
                    this.mUITextBox100Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox100Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox100Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox100Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window21 : WinWindow
    {
        
        public UIItem0Window21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox101";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox101Edit
        {
            get
            {
                if ((this.mUITextBox101Edit == null))
                {
                    this.mUITextBox101Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox101Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox101Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox101Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window31 : WinWindow
    {
        
        public UIItem0Window31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox102";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox102Edit
        {
            get
            {
                if ((this.mUITextBox102Edit == null))
                {
                    this.mUITextBox102Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox102Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox102Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox102Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window4 : WinWindow
    {
        
        public UIItem0Window4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox103";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox103Edit
        {
            get
            {
                if ((this.mUITextBox103Edit == null))
                {
                    this.mUITextBox103Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox103Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox103Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox103Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window5 : WinWindow
    {
        
        public UIItem0Window5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox104";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox104Edit
        {
            get
            {
                if ((this.mUITextBox104Edit == null))
                {
                    this.mUITextBox104Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox104Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox104Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox104Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window6 : WinWindow
    {
        
        public UIItem0Window6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox105";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox105Edit
        {
            get
            {
                if ((this.mUITextBox105Edit == null))
                {
                    this.mUITextBox105Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox105Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox105Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox105Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIWeightfootofDrillPipGroup : WinGroup
    {
        
        public UIWeightfootofDrillPipGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Weight / foot of Drill Pipe";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem0Window.SearchProperties[WinWindow.PropertyNames.Name] = "0";
                    this.mUIItem0Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIItem0Window.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIItem0Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItem0Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIBHAlengthWindow : WinWindow
    {
        
        public UIBHAlengthWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button41";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIBHAlengthButton
        {
            get
            {
                if ((this.mUIBHAlengthButton == null))
                {
                    this.mUIBHAlengthButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBHAlengthButton.SearchProperties[WinButton.PropertyNames.Name] = "BHA length";
                    this.mUIBHAlengthButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIBHAlengthButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBHAlengthButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox51Window : WinWindow
    {
        
        public UITextBox51Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox51";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox51Edit
        {
            get
            {
                if ((this.mUITextBox51Edit == null))
                {
                    this.mUITextBox51Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox51Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox51Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox51Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox50Window : WinWindow
    {
        
        public UITextBox50Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox50";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox50Edit
        {
            get
            {
                if ((this.mUITextBox50Edit == null))
                {
                    this.mUITextBox50Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox50Edit.SearchProperties[WinEdit.PropertyNames.Name] = "B.F.";
                    this.mUITextBox50Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox50Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox50Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox49Window : WinWindow
    {
        
        public UITextBox49Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox49";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox49Edit
        {
            get
            {
                if ((this.mUITextBox49Edit == null))
                {
                    this.mUITextBox49Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox49Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox49Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox49Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITextBox52Window : WinWindow
    {
        
        public UITextBox52Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox52";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox52Edit
        {
            get
            {
                if ((this.mUITextBox52Edit == null))
                {
                    this.mUITextBox52Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox52Edit.SearchProperties[WinEdit.PropertyNames.Name] = "BHA Length";
                    this.mUITextBox52Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox52Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox52Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window7 : WinWindow
    {
        
        public UIItem0Window7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox44";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox44Edit
        {
            get
            {
                if ((this.mUITextBox44Edit == null))
                {
                    this.mUITextBox44Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox44Edit.SearchProperties[WinEdit.PropertyNames.Name] = "Original Link";
                    this.mUITextBox44Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox44Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox44Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window12 : WinWindow
    {
        
        public UIItem0Window12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox46";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox46Edit
        {
            get
            {
                if ((this.mUITextBox46Edit == null))
                {
                    this.mUITextBox46Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox46Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox46Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox46Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItem0Window22 : WinWindow
    {
        
        public UIItem0Window22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox47";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox47Edit
        {
            get
            {
                if ((this.mUITextBox47Edit == null))
                {
                    this.mUITextBox47Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox47Edit.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUITextBox47Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox47Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIWeightfootofDrillColGroup : WinGroup
    {
        
        public UIWeightfootofDrillColGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Weight / foot of Drill Collar";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItem0Window.SearchProperties[WinWindow.PropertyNames.Name] = "0";
                    this.mUIItem0Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIItem0Window.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIItem0Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItem0Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow : WinWindow
    {
        
        public UIClearWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button35";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow1 : WinWindow
    {
        
        public UIClearWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button37";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow2 : WinWindow
    {
        
        public UIClearWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button38";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow3 : WinWindow
    {
        
        public UIClearWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button87";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow11 : WinWindow
    {
        
        public UIClearWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button88";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow21 : WinWindow
    {
        
        public UIClearWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button89";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow31 : WinWindow
    {
        
        public UIClearWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button90";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow4 : WinWindow
    {
        
        public UIClearWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button91";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow5 : WinWindow
    {
        
        public UIClearWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button92";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIClearWindow6 : WinWindow
    {
        
        public UIClearWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button93";
            this.WindowTitles.Add("Drilling Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "clear";
                    this.mUIClearButton.WindowTitles.Add("Drilling Calculator");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClearButton;
        #endregion
    }
}
