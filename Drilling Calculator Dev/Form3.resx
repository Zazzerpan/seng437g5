<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox9.Text" xml:space="preserve">
    <value>Cementing is the process by which cement slurry is placed in the annulus, bonding the casing to the formation.
The conventional method of doing this is to pump cement down the casing and displace it around the casing shoe into the annulus.

The properties of various classes of cement has already been feeded. In case you need to use your own values, please use the custom option.

Tail Cement 1 is for Weight of Cement calculation.
Tail Cement 2 is for Height of Cement in annulus calculation.</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>When the application starts, this screen is shown.
It gives a quick idea of all the possible functions implemented in this application.
You can click on the buttons to directly open that module or can simply select the tab in which that module resides.
You can also click on the 'Drilling Calculator' logo to open 'About'.
Click on Option, to show 'About', 'Help' or to quit from the application

Dynamic Help: With this feature, when you put the mouse pointer over a Button, then the required inputs change to yellow color and the optional inputs change to gray color.

Accuracy: All results are calculated as double prescision values. Upto 16 decimal points. Please round off accordingly.</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>Shaft Power: It is the power developed by the engine.

Heat Energy: It is the energy supplied to the engine.

Efficiency: It is the efficiency of the engine. 

For shaft power, please enter either the Revolutions or the Angular Velocity. If you enter both, then result will show errors.

The efficiency calculation, it can be derived from the previous results or you can enter your own values. </value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>Annulus capacity: It is the capacity (in barrels) of the annulus with the specified drillstring, its length and hole size. 
Pump Cycles: It is the complete number of cycles through which the pump needs to operate to pump the mud into drillstring and remove from annulus

This section calculates the annular capacities and pump cycles 

You can add upto 6 drillpipe / Heavy weight drill pipes / Bottom Hole Assemblies. 
Dynamic help tells you which values are to be entered to compute the functions like Annulus capacities, 
</value>
  </data>
  <data name="richTextBox4.Text" xml:space="preserve">
    <value>Mud pumps are used to pump the drilling mud from the mud tanks into the drillstring. It may be duplex or triplex. Duplex pumps are double acting pumps which pump in both forward and backward strokes. It is generally used in pairs. Triplex pumps only pumps in forward stroke. Its volumetric efficiency is very high. Three are used together. Duplex pumps generally give pulsations in their output. To correct pulsations a surge chamber is fitted to it. 

This sections calculates the pump factor, discharge and power.

The color button may be used to copy the specified value to other modules. 

</value>
  </data>
  <data name="richTextBox5.Text" xml:space="preserve">
    <value>Drillstring is composed with the drillpipe, HWDP, and BHA. They are used to transmit the torque downhole. The lower part is used to apply the weight on bit, which arrests wobbling,jerks and vibrations. 

Buoyant weight: The drillstring actually works with the hole filled with drilling mud. Hence a buoyant force is applied in the drillstring which makes the drillstring lighter than what is actually weighs in air. 

Hookload: It is the weight of the drillstring in air minus the buoyant weight. It is the actual weight which is supported by the rig. 

Overpull: when the drillstring gets stuck a force needs to be applied to set it free. But the drillstring can only support upto a certain force, called overpull, above which is buckles. Mathematically it is the yeild strength of the weakest part minus the hookload. 

Neutral Point: It is the point at which the tension changes to compression. It generally lies in the BHA. It should never be into the drillpipe or drilling jars. 

This section calculates the above four parameters concerning drillstring. You can enter upto 2 different drillpipes and 4 BHA options. If neutral point moves into the drillpipe then result will show warning indication. 

Provide the class and grade of the drillpipe as it is needed to determine the yield strength. The color buttons can be used to paste the values when copied from the chart. 

For overpull, the lowest value will be taken into considerations. 

</value>
  </data>
  <data name="richTextBox6.Text" xml:space="preserve">
    <value>BHA stands for bottom hole assembly. Its primary function is to put the weight on bit. It consists of the heavy weight drill pipes and drill collars. It can also have assemblies like drilling jars,centralizers,stabililzers etc. 

This section calcultes the length of BHA required as per the given configuration. In case of a directional well an inclination angle also needs to be provided. Click on the checkbox the activate that control. 

A permissable safety factor is also needed. It is generally taken as .85 but you can change it as per requirement. 


</value>
  </data>
  <data name="richTextBox7.Text" xml:space="preserve">
    <value>This is an additional feature which shall help you out with your drilling calculations.

There are three charts inbuilt. They include, DrillPipe, HWDP and Drill Collars.
The parameters are, Internal Diameter, Outer Diameter and Weight per foot.

The color buttons can be used to copy the values shown to other modules.
(The fraction will automatically be changed to decimal upon copying)

The DrillPipe and Drill Collar charts are API standard.

Some of the parameters appears in a green colored textbox. When you select these, you need not select the other parameters. Green indicates self sufficiency.</value>
  </data>
  <data name="richTextBox8.Text" xml:space="preserve">
    <value>Modern wells use directional drilling techniques for for efficiency and cost effictiveness.

This section can be used to design a J Profile or S Profile well.

J Profile - It consists of a vertical section, a Build up Section and a tangent section (properly ordered)

S Profile - It consists of a vertical section, a Build up Section, a tangent section, and a Drop off Section. (properly ordered) After the drop off section the well may or may not return to a vertical position.

This section has been subdivided into 7 tab sections. 

The first tab section is used to calculate Horizontal Departure and Azimuth on providing UTM co-ordinates.
(Note: If co-ordinates given are like: Origin: 0 Target: +1509N and -426 E, then for Origin enter 0 for both N and E. But for Target use the given values, for + and - give N/E or S/W respectively and accordingly.)

The second tab is used to enter the well data. The horizontal departure needs to be provided. It can be copied from the first tab. Select 'J' or 'S' well at the beginning itself.
(Note: For S wells, if the well return to vertical use final angle of inclination as '0'.)

After entering values, click 'Solve'. Then as per the data entered the well profile is solved and displayed accordingly in the 3rd,4th,5th,6th or 7th tab accordingly.

</value>
  </data>
  <data name="richTextBox10.Text" xml:space="preserve">
    <value>MAASP: This is the annular pressure at the surface that corresponds to the pressure at the weakest point of the hole. The fracture gradient at the last casing shoe traditionally defines the weakest point. The MAASP represents the annulus pressure which may be expected to result in loss of circulation while controlling a kick.

Leak Off Test: It is conducted in order to find the fracture gradient of certain formation. The results of the leak off test also dictate themaximum equivalent mud weight that should be applied to the wellduring drilling operations.

This section would calculate the above two values. Dynamic Help would assist you in entering the values.

The graph which is shown is not to be scaled. It also has nothing to do with the results. It is just illustrative.</value>
  </data>
  <data name="richTextBox11.Text" xml:space="preserve">
    <value>A kick is the term used to describe the inflow of formation fluid into the wellbore during drilling operation. This arises due to the formation pressure being greater than the hydrostatic pressure imposed by the mud column. A kick may be primarily composed of salt water, oil, natural gas or a combination of the fluids. 

Kill operation is circulating out a kick. Three methods are there. The Drillers Method (Two circulations), The Engineers Method (one circulation) and Concurrent Method.

This section would assist you in calculating the various values which are needed prior to a Kill operation.</value>
  </data>
</root>